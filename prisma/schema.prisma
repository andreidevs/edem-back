// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  name     String?
  role     Role       @default(COACH)
  password String
  groups   Groups[]
  students Students[]
  payments Payments[]
  daily    Daily[]
  indiv    Indiv[]
  hall     Hall[]

}

model Groups {
  id            Int         @id @default(autoincrement())
  time          String
  name          String
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  weekDays      String[]
  count         Int
  type          String      @default("Группа")
  typeWorkout   TypeWorkout @relation(fields: [typeWorkoutId], references: [id])
  typeWorkoutId Int
  students      Students[]
  payments      Payments[]
  daily         Daily[]
  hall          Hall        @relation(fields: [hallId], references: [id])
  hallId        Int
}

model Students {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  phone        String
  name         String
  indiv        Indiv?
  group        Groups?    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId      Int?
  paid         Boolean    @default(false)
  paidDate     DateTime?
  subscription Int
  single       Boolean    @default(false)
  payments     Payments[]

}

model Payments {
  id        Int             @id @default(autoincrement())
  title     String?
  student   Students        @relation(fields: [studentId], references: [id])
  studentId Int
  group     Groups          @relation(fields: [groupId], references: [id])
  groupId   Int
  date      DateTime
  price     Int
  coach     User            @relation(fields: [coachId], references: [id])
  coachId   Int
  type      TypesActivities
  indiv     Indiv?          @relation(fields: [indivId], references: [id])
  indivId   Int?
  hall      Hall?           @relation(fields: [hallId], references: [id])
  hallId    Int?
}

model Daily {
  id      Int             @id @default(autoincrement())
  coach   User            @relation(fields: [coachId], references: [id])
  coachId Int
  date    DateTime
  type    TypesActivities
  group   Groups?         @relation(fields: [groupId], references: [id])
  groupId Int?
  indiv   Indiv?          @relation(fields: [indivId], references: [id])
  indivId Int?
}

model Indiv {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  student      Students   @relation(fields: [studentId], references: [id])
  studentId    Int        @unique
  phone        String
  paid         Boolean    @default(false)
  paidDate     DateTime
  subscription Int
  payments     Payments[]
  daily        Daily[]
  hall         Hall       @relation(fields: [hallId], references: [id])
  hallId       Int

}

model Expenses {
  id     Int      @id @default(autoincrement())
  date   DateTime
  title  String
  price  Int
  hall   Hall?    @relation(fields: [hallId], references: [id])
  hallId Int?
}

model TypeWorkout {
  id     Int      @id @default(autoincrement())
  name   String
  code   String
  groups Groups[]
}

model Hall {
  id       Int        @id @default(autoincrement())
  name     String
  code     String
  groups   Groups[]
  user     User[]
  payments Payments[]
  indiv    Indiv[]
  expenses Expenses[]
}

//ENUMS
enum Role {
  ADMIN
  COACH
}

enum TypesActivities {
  group
  single
  mini
  indiv
}
